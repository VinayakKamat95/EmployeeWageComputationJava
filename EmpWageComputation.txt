UC-1

public class EmpWageComputation{
   public static void main(String[] args) {
	//Constants
	int IS_FULL_TIME = 1;
	//Computation
   double empCheck = Math.floor(Math.random() * 10) % 2;
   if (empCheck == IS_FULL_TIME)
	System.out.println("Employee is Present");
   else
	System.out.println("Employee is Absent");
   }
}
=======================================
UC-2

public class EmpWageComputation{
   public static void main(String[] args) {
	//Constants
   int IS_FULL_TIME = 1;
   int EMP_RATE_PER_HOUR = 20;
	//Variables
   int empHrs = 0;
   int empWage = 0;
	//Computation
   double empCheck = Math.floor(Math.random() * 10) % 2;
   if (empCheck == IS_FULL_TIME)
	empHrs = 8;
   empWage = empHrs * EMP_RATE_PER_HOUR;
   System.out.println("Emp Wage : " + empWage);
   }
}
===========================================
UC-3

public class EmpWageComputation{
   public static void main(String[] args) {
	//Constants
   int IS_PART_TIME = 1;
   int IS_FULL_TIME = 2;
   int EMP_RATE_PER_HOUR = 20;
	//Variables
   int empHrs = 0;
   int empWage = 0;
	//Computation
   double empCheck = Math.floor(Math.random() * 10) % 3;
   if (empCheck == IS_FULL_TIME)
	empHrs = 8;
   else if (empCheck == IS_PART_TIME)
	empHrs = 4;

   empWage = empHrs * EMP_RATE_PER_HOUR;
   System.out.println("Emp Wage : " + empWage);
   }
}
=================================================
UC-4 switch 3 video

public class EmpWageComputation{
   //Constants
   public static final int IS_PART_TIME = 1;
   public static final int IS_FULL_TIME = 2;
   public static final int EMP_RATE_PER_HOUR = 20;

   public static void main(String[] args) {	   
	//Variables
   int empHrs = 0;
   int empWage = 0;
	//Computation
   double empCheck = Math.floor(Math.random() * 10) % 3;
   switch(empCheck)
	case IS_FULL_TIME:
	   empHrs = 8;
	case IS_PART_TIME:
	   empHrs = 4;
	default
	   empHrs = 0;

   empWage = empHrs * EMP_RATE_PER_HOUR;
   System.out.println("Emp Wage : " + empWage);
   }
}
=====================================================================
UC-5
public class EmpWageComputation{
   //Constants
   public static final int IS_PART_TIME = 1;
   public static final int IS_FULL_TIME = 2;
   public static final int EMP_RATE_PER_HOUR = 20;
   public static final int NUM_OF_WORKING_DAYS = 20;

   public static void main(String[] args) {	   
	//Variables
   int empHrs = 0;
   int empWage = 0;
   totalEmpWage = 0;
	//Computation
   for(int day = 0; day < NUM_OF_WORKING_DAYS; day++){

   int empCheck = (int)Math.floor(Math.random() * 10) % 3;
   switch(empCheck) {
	case IS_FULL_TIME:
	   empHrs = 8;
	case IS_PART_TIME:
	   empHrs = 4;
	default
	   empHrs = 0;
   }
   empWage = empHrs * EMP_RATE_PER_HOUR;
   totalEmpWage += empWage; 
   System.out.println("Emp Wage : " + empWage);
   }
   System.out.println("Total Emp Wage : " + totalEmpWage);
  
 }
}
==============================================================
UC-6
public class EmpWageComputation{
   //Constants
   public static final int IS_PART_TIME = 1;
   public static final int IS_FULL_TIME = 2;
   public static final int EMP_RATE_PER_HOUR = 20;
   public static final int NUM_OF_WORKING_DAYS = 20;
   public static final int MAX_HRS_IN_MONTH = 50;

   public static void main(String[] args) {	   
	//Variables
   int empHrs = 0;
   int totalEmpHrs = 0;
   totalWorkingDays = 0;
	//Computation
  while (totalEmpHrs <= MAX_HRS_IN_MONTH && totalWorkingDays < NUM_OF_WORKING_DAYS){
  totalWorkingDays ++;

   int empCheck = (int)Math.floor(Math.random() * 10) % 3;
   switch(empCheck) {
	case IS_FULL_TIME:
	   empHrs = 8;
	case IS_PART_TIME:
	   empHrs = 4;
	default
	   empHrs = 0;
   }
   totalEmpHrs += empHrs;
   System.out.println("Days#: " + totalWorkingDays + " Emp Hr: " + empHrs);
   }   
   int totalEmpWage = totalEmpHrs * EMP_RATE_PER_HOUR;
   System.out.println("Total Emp Wage : " + totalEmpWage);
  
 }
}
=====================================================
UC-7
public class EmpWageComputation{
   //Constants
   public static final int IS_PART_TIME = 1;
   public static final int IS_FULL_TIME = 2;
   public static final int EMP_RATE_PER_HOUR = 20;
   public static final int NUM_OF_WORKING_DAYS = 20;
   public static final int MAX_HRS_IN_MONTH = 50;

   public static int computeEmpWage() {
       //Variables
   int empHrs = 0;
   int totalEmpHrs = 0;
   totalWorkingDays = 0;
   
   //Computation
  while (totalEmpHrs <= MAX_HRS_IN_MONTH && totalWorkingDays < NUM_OF_WORKING_DAYS){
  totalWorkingDays ++;

   int empCheck = (int)Math.floor(Math.random() * 10) % 3;
   switch(empCheck) {
	case IS_FULL_TIME:
	   empHrs = 8;
	case IS_PART_TIME:
	   empHrs = 4;
	default
	   empHrs = 0;
   }
   totalEmpHrs += empHrs;
   System.out.println("Days#: " + totalWorkingDays + " Emp Hr: " + empHrs);
   }   
   int totalEmpWage = totalEmpHrs * EMP_RATE_PER_HOUR;
   System.out.println("Total Emp Wage : " + totalEmpWage);
   return totalEmpWage;
  }

   public static void main(String[] args) {	   
      computeEmpWage();
   }
	
}
===================================================
UC-8
public class EmpWageComputation{
   //Constants
   public static final int IS_PART_TIME = 1;
   public static final int IS_FULL_TIME = 2;
   //public static final int EMP_RATE_PER_HOUR = 20;
   //public static final int NUM_OF_WORKING_DAYS = 20;
   //public static final int MAX_HRS_IN_MONTH = 50;

   public static int computeEmpWage(String company, int empRatePerHour, int numOfWorkingDays, int maxHoursPerMonth) {
       //Variables
   int empHrs = 0;
   int totalEmpHrs = 0;
   totalWorkingDays = 0;
   
   //Computation
  while (totalEmpHrs <= MAX_HRS_IN_MONTH && totalWorkingDays < NUM_OF_WORKING_DAYS){
  totalWorkingDays ++;

   int empCheck = (int)Math.floor(Math.random() * 10) % 3;
   switch(empCheck) {
	case IS_FULL_TIME:
	   empHrs = 8;
	case IS_PART_TIME:
	   empHrs = 4;
	default
	   empHrs = 0;
   }
   totalEmpHrs += empHrs;
   System.out.println("Days#: " + totalWorkingDays + " Emp Hr: " + empHrs);
   }   
   int totalEmpWage = totalEmpHrs * EMP_RATE_PER_HOUR;
   System.out.println("Total Emp Wage for Company " +company+" is: " + totalEmpWage);
   return totalEmpWage;
  }

   public static void main(String[] args) {	   
      computeEmpWage("Dmart", 20, 20, 50);
      computeEmpWage("Reliance", 10, 4, 20);
   }
	
}
==================================================
UC-9
public class EmpWageComputation{
   //Constants
   public static final int IS_PART_TIME = 1;
   public static final int IS_FULL_TIME = 2;
   //public static final int EMP_RATE_PER_HOUR = 20;
   //public static final int NUM_OF_WORKING_DAYS = 20;
   //public static final int MAX_HRS_IN_MONTH = 50;

   public static int computeEmpWage(String company, int empRatePerHour, int numOfWorkingDays, int maxHoursPerMonth) {
       //Variables
   int empHrs = 0;
   int totalEmpHrs = 0;
   totalWorkingDays = 0;
   
   //Computation
  while (totalEmpHrs <= MAX_HRS_IN_MONTH && totalWorkingDays < NUM_OF_WORKING_DAYS){
  totalWorkingDays ++;

   int empCheck = (int)Math.floor(Math.random() * 10) % 3;
   switch(empCheck) {
	case IS_FULL_TIME:
	   empHrs = 8;
	case IS_PART_TIME:
	   empHrs = 4;
	default
	   empHrs = 0;
   }
   totalEmpHrs += empHrs;
   System.out.println("Days#: " + totalWorkingDays + " Emp Hr: " + empHrs);
   }   
   int totalEmpWage = totalEmpHrs * EMP_RATE_PER_HOUR;
   System.out.println("Total Emp Wage for Company " +company+" is: " + totalEmpWage);
   return totalEmpWage;
  }

   public static void main(String[] args) {	   
      computeEmpWage("Dmart", 20, 20, 50);
      computeEmpWage("Reliance", 10, 4, 20);
   
   }
	
}
========================================================